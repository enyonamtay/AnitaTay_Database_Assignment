
					DATABASE ASSIGNMENT.

1. SELECT COUNT (u_id) FROM users;
Comment
Select and count all users in the users table using the primary key(u_id)



2. SELECT COUNT (transfer_id) 
   FROM transfers
   WHERE send_amount_currency ='CFA';

Comment
Select and count all transfers using the transfer_id in the transfers table where send_amount_currency is equal to 'CFA'



3. SELECT COUNT (u_id)
   FROM transfers
   WHERE u_id = 3 AND send_amount_currency ='CFA';

Comment
Select and count all different users using their u_id in the transfers table, where u_id is equal to 3 and send_amount_currency is equal to 'CFA'. 
In this query both conditions (WHERE u_id = 3 AND send_amount_currency ='CFA') must be true to display the right answer.





4. SELECT COUNT(atx_id)
   FROM agent_transactions
   WHERE when_created BETWEEN '2018-01-01' AND '2018-12-31';

Comment
This query selects and count all agent transactions between 2018-01-01 and 2018-12-31 in the agent_transactions table.




5. WITH  withdrawers AS
    (SELECT COUNT(agent_id) netwithdrawers FROM agent_transactions HAVING COUNT(amount) IN
    (SELECT COUNT(amount) FROM agent_transactions WHERE amount >-1 AND amount!=0 HAVING
    COUNT(amount)>  (SELECT COUNT(amount) FROM agent_transactions WHERE amount <1 AND amount!=0)))
    SELECT netwithdrawers FROM withdrawers;
    WITH mydepositors AS
    (SELECT COUNT(agent_id) netdepositors FROM agent_transactions HAVING COUNT(amount) IN
    (SELECT COUNT(amount) FROM agent_transactions WHERE amount <1 AND amount!=0 HAVING COUNT(amount)>
    (SELECT COUNT(amount) FROM agent_transactions WHERE amount >-1 AND amount!=0)))
    SELECT netdepositors FROM depositors;





6. SELECT City, Volume INTO atx_volume_city_summary FROM 
   (SELECT agents.city AS City, count(agent_transactions.atx_id) AS Volume FROM agents 
   INNER JOIN agent_transactions 
   ON agents.agent_id = agent_transactions.agent_id 
   WHERE (agent_transactions.when_created > (NOW() - INTERVAL '1 week')) 
  GROUP BY agents.city) as atx_volume_summary;

  SELECT * FROM atx_volume_city_summary;





7. SELECT City, Volume, Country INTO atx_volume_city_summary_by_country 
   FROM ( Select agents.city AS City, agents.country AS Country, count(agent_transactions.atx_id) AS Volume FROM agents 
   INNER JOIN agent_transactions 
   ON agents.agent_id = agent_transactions.agent_id 
   WHERE (agent_transactions.when_created > (NOW() - INTERVAL '1 week')) 
   GROUP BY agents.country,agents.city) as atx_volume_summary_with_Country; 

  SELECT * FROM atx_volume_city_summary_by_Country;





8. SELECT wallets.ledger_location AS Country, transfers.send_amount_currency AS transfer_kind,
    SUM(transfers.send_amount_scalar) AS volume FROM transfers AS transfers INNER JOIN
    wallets AS wallets ON transfers.transfer_id=wallets.wallet_id
    WHERE transfers.when_created= (NOW()-INTERVAL '1 week')
    GROUP BY wallets.ledger_location, transfers.send_amount_currency





9. SELECT count(transfer_id) AS Transaction_count, count(transfers.source_wallet_id) AS Unique_Senders, 
   transfers.kind AS transfer_Kind, wallets.ledger_location AS Country, sum(transfers.send_amount_scalar) AS Volume FROM transfers 
   INNER JOIN wallets 
   ON transfers.source_wallet_id = wallets.wallet_id where (transfers.time_created > (NOW() - INTERVAL '1 week'))
   GROUP BY wallets.ledger_location, transfers.kind; 





10.  SELECT source_wallet_id, send_amount_scalar FROM 
     transfers WHERE send_amount_currency = 'CFA' AND (send_amount_scalar>10000000) AND 
    (transfers.when_created > (NOW() - INTERVAL '1 month'));

Comment
This query selects the columns source_wallet_id and send_amount_scalar from the transfers table where the amount transferred is more than 10000000 CFA in the last month.




